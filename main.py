from unittest import result
import numpy as np
from scipy.sparse import csr_matrix
import time
from os import listdir
from z3 import *
from objects.Net import Net
from objects.Formula import Formula, Clause, Atom
from tools.reader import *
from tasks.reachability import *
from tasks.separators import *
from tasks.simplify import *


def runReachability(path, log=False):
    net = createNet(path+".lola")
    m = createMarking(net, path+".formula")
    start = time.time()
    answer = isReachable(net, m, log=log)
    stop = time.time()
    print("--Reachability check------")
    print("Petri net:", path)
    print("Number of places:", net.p)
    print("Number of transitions:", net.t)
    print("Reachability output:", answer)
    print("Check time:", stop-start)
    print("--------------------------")


def runCoverability(path, log=False):
    net = createNet(path+".lola")
    m = createMarking(net, path+".formula")
    start = time.time()
    answer = isCoverable(net, m, log=log)
    stop = time.time()
    print("--Coverability check------")
    print("Petri net:", path)
    print("Number of places:", net.p)
    print("Number of transitions:", net.t)
    print("Size:", net.size)
    print("Coverability output:", answer)
    print("Check time:", stop-start)
    print("--------------------------")


def runSeparator(path, log=False):
    net = createNet(path+".lola")
    m = createMarking(net, path+".formula")
    start = time.time()
    sep = generateLocallyClosedBiSeparator(net, net.transitions, net.marking, m)
    step = time.time()
    check = checkLocallyClosedBiSeparatorWithSyndrome(net, sep, net.marking, m, log=log)
    stop = time.time()
    nb_atomic_check = 0
    for clause in sep.clauses:
        for t in net.transitions:
            nb_atomic_check += len(clause.forwardSyndrome[t.name][1])
            nb_atomic_check += len(clause.backwardSyndrome[t.name][1])
    print("--Separator generation----")
    print("Petri net:", path)
    print("Number of places:", net.p)
    print("Number of transitions:", net.t)
    print("Size:", net.size)
    print("Separator size:", sep.getSize())
    print("Syndrome check:", check[0])
    print("Number of atomic checks:", nb_atomic_check)
    print("Number of performed atomic checks:", check[2])
    print("Generation time:", step-start)
    print("Syndrome check time:", stop-step)
    print("Paralelized syndrome check time:", check[1])
    print("--------------------------")
    # sep.print()


def runBenchmarkReachabilityInstances(path, log=False):
    net = createNet(path+".lola")
    m = createMarking(net, path+".formula")
    step0 = time.time()
    answer = isReachable(net, m, log=log)
    step1 = time.time()
    print("--------------------------")
    print("Petri net:", path)
    print("Size:", net.size)
    print("Number of places:", net.p)
    print("Number of transitions:", net.t)
    print("Reachability output:", answer)
    step2 = time.time()
    sep = generateLocallyClosedBiSeparator(net, net.transitions, net.marking, m)
    step3 = time.time()
    check = checkLocallyClosedBiSeparatorWithSyndrome(net, sep, net.marking, m, log=log)
    step4 = time.time()
    nb_atomic_check = 0
    for clause in sep.clauses:
        for t in net.transitions:
            nb_atomic_check += len(clause.forwardSyndrome[t.name][1])
            nb_atomic_check += len(clause.backwardSyndrome[t.name][1])
    print("Separator size:", sep.getSize())
    print("Syndrome check:", check[0])
    print("Number of atomic checks:", nb_atomic_check)
    print("Number of performed atomic checks:", check[2])
    print("Reachability check time:", step1-step0)
    print("Separator generation time:", step3-step2)
    print("Syndrome check time:", step4-step3)
    print("Paralelized syndrome check time:", check[1])
    print("--------------------------")

    
def runBenchmarkCoverabilityInstances(path, log=False):
    net = createNet(path+".lola")
    m = createMarking(net, path+".formula")
    print("--------------------------")
    print("Petri net:", path)
    print("Size:", net.size)
    print("Number of places:", net.p)
    print("Number of transitions:", net.t)
    coverability_check,bad_marking = createBadMarkingFromCoverabilityCheck(net, m, log=log)
    if type(bad_marking) != int: m = bad_marking
    step0 = time.time()
    answer = isReachable(net, m, log=log)
    step1 = time.time()
    print("Coverability output:", coverability_check)
    print("Reachability output:", answer)
    step2 = time.time()
    sep = generateLocallyClosedBiSeparator(net, net.transitions, net.marking, m)
    step3 = time.time()
    check = checkLocallyClosedBiSeparatorWithSyndrome(net, sep, net.marking, m, log=log)
    step4 = time.time()
    nb_atomic_check = 0
    for clause in sep.clauses:
        for t in net.transitions:
            nb_atomic_check += len(clause.forwardSyndrome[t.name][1])
            nb_atomic_check += len(clause.backwardSyndrome[t.name][1])
    print("Separator size:", sep.getSize())
    print("Syndrome check:", check[0])
    print("Number of atomic checks:", nb_atomic_check)
    print("Number of performed atomic checks:", check[2])
    print("Reachability check time:", step1-step0)
    print("Separator generation time:", step3-step2)
    print("Syndrome check time:", step4-step3)
    print("Paralelized syndrome check time:", check[1])
    print("--------------------------")


# runBenchmarkReachabilityInstances("./nets/homemade/figure-1-esparza")
# runBenchmarkReachabilityInstances("./nets/homemade/figure-1a-haddad")
# runBenchmarkReachabilityInstances("./nets/homemade/mine-6")
# runBenchmarkReachabilityInstances("./nets/homemade/mine-7")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-1")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-2")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-5")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-10")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-15")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-20")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-25")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-30")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-35")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-40")
# runBenchmarkReachabilityInstances("./nets/homemade/bad-case-45")


# # In these instances, the technique to produce unreachable marking works a bit better
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/basicME")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/manufacturing")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/pingpong")


# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/kanban")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/lamport")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/newdekker")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/newrtp")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/peterson")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_boundedPN/read-write")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/basicME")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/manufacturing")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/MultiME")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/pingpong")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/bingham_h25")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/bingham_h50")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/bingham_h150")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/bingham_h250")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/csm")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/extendedread-write")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/extendedread-write-smallconsts")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/fms")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/fms_attic")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/kanban")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/leabasicapproach")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/mesh2x2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/mesh3x2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/multipool")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/pncsacover")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/mist_PN/pncsasemiliv")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_1__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_1__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_2__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_2__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_4__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_4__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/concdb__single_client_writes__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/concdb__single_client_writes__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/concdb__single_client_writes__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/finite_leader__single_leader__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/finite_leader__single_leader__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/finite_leader__single_leader__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/firewall__no_pred_called_with_zero__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/firewall__no_pred_called_with_zero__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/firewall__no_pred_called_with_zero__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/howait__all_workers_finished_if_wait_over__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/howait__all_workers_finished_if_wait_over__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/parikh__should_already_be_initialized__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/parikh__should_already_be_initialized__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/parikh__should_already_be_initialized__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/pipe__single_message_in_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/pipe__single_message_in_mailbox__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/reslock__critical__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/reslock__critical__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/reslock__critical__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/reslockbeh__critical__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/ring__single_message_in_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_3__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/safe_send__sending_to_non-pid_3__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/sieve__single_message_in_counter_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/sieve__single_message_in_counter_mailbox__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/sieve__single_message_in_filter_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/sieve__single_message_in_sieve_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/state_factory__after_receive_if_no_mail__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/state_factory__single_message_in_mailbox__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/stutter__we_abhorr_as__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/stutter__we_abhorr_as__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/stutter__we_abhorr_as__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/unsafe_send__sending_to_non-pid__depth_0")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/unsafe_send__sending_to_non-pid__depth_1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/soter/unsafe_send__sending_to_non-pid__depth_2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/Boop_simple_vf_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/buggy_spaghetti_vf_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/buggy_spaghetti_vf_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/conditionals_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/constants_vf_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/stack_cas_p0_vs_satabs.3")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/conditionals_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/dekker_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/dekker_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/double_lock_p1_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/double_lock_p2_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/double_lock_p2_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/double_lock_p3_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/double_lock_p3_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/Function_Pointer3_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/Function_Pointer3_vs_satabs.2", log=True)
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/lu-fig2_fixed_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/lu-fig2_fixed_vs_satabs.2", log=True)
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/lu-fig2_fixed_vs_satabs.3", log=True)
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/peterson_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/peterson_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/pthread5_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/pthread5_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/pthread5_vs_satabs.3")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/pthread5_vs_satabs.4")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/rand_cas_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/rand_cas_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/rand_lock_p0_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/rand_lock_p0_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/rand_lock_p0_vs_satabs.3")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/simple_loop5_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/simple_loop5_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/spin2003_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/spin2003_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/stack_cas_p0_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/stack_cas_p0_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/stack_lock_p0_vs_satabs.1")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/stack_lock_p0_vs_satabs.2")
# runBenchmarkCoverabilityInstances("./nets/philipofftermatt/wahl-kroening/szymanski_vs_satabs.1")

